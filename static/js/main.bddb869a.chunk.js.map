{"version":3,"sources":["components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/todo-data.js","components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["TodoListItem","state","editing","isInvalid","text","_this","props","label","handleClick","setState","_ref","handleSubmit","evt","preventDefault","trim","length","onEdit","id","handleChange","target","value","_this$state","this","react_default","a","createElement","onSubmit","className","type","onChange","concat","_this$props","onDeleted","onToggleImportant","onToggleDone","classNames","done","important","onClick","renderForm","renderDisplay","React","Component","TodoList","todos","map","todo","key","components_todo_list_item","todoData","AppHeader","SearchPanel","term","onSearchChange","placeholder","ItemAddForm","onAdd","ItemStatusFilter","filter","onFilterChange","name","_ref2","clazz","App","handleDelete","handleEdit","handleAdd","createTodoItem","Object","toConsumableArray","toggleProperty","nextId","_nextId","array","propName","idx","findIndex","oldItem","newItem","objectSpread","defineProperty","slice","items","item","toLowerCase","indexOf","doneCount","todoCount","visibleItems","search","components_app_header","components_search_panel","components_item_status_filter","components_todo_list","components_item_add_form","Boolean","window","location","hostname","match","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bddb869a.chunk.js","sourcesContent":["import TodoListItem from './todo-list-item';\n\nexport default TodoListItem;","import React from 'react';\n\nimport './todo-list-item.css';\n\nclass TodoListItem extends React.Component {\n\n    state = {\n        editing: false,\n        isInvalid: false,\n        text: this.props.label,\n    };\n\n    handleClick = () => {\n        this.setState(({ editing }) => ({ editing: !editing }));\n    }\n\n    handleSubmit = (evt) => {\n        evt.preventDefault();\n        const text = this.state.text.trim();\n        if (text.length > 0) {\n            this.props.onEdit(this.props.id, text);\n            this.setState({\n                editing: !this.state.editing,\n                isInvalid: false,\n                text: text\n            });\n        } else {\n            this.setState({ isInvalid: true });\n        }\n    }\n\n    handleChange = (evt) => {\n        this.setState({ text: evt.target.value });\n    }\n\n    renderForm() {\n        const { isInvalid, text } = this.state;\n        return (\n            <form onSubmit={this.handleSubmit} className='todo-list-item d-flex'>\n                <input type='text'\n                    value={text}\n                    onChange={this.handleChange}\n                    className={`todo-list-item-label form-control form-input ${isInvalid ? 'is-invalid' : ''}`} />\n                <button type='submit'\n                    className='btn btn-outline-primary btn-sm float-right'>\n                    <i className='fa fa-floppy-o' />\n                </button>\n            </form>\n        );\n    }\n\n    renderDisplay() {\n        const { label, onDeleted, onToggleImportant, onToggleDone, done, important } = this.props;\n        let classNames = 'todo-list-item';\n\n        if (done) {\n            classNames += ' done';\n        }\n        if (important) {\n            classNames += ' important';\n        }\n\n        return (\n            <span className={`d-flex ${classNames}`}>\n                <span\n                    onClick={onToggleDone}\n                    className='todo-list-item-label todo-label'>\n                    {label}\n                </span>\n                <div className='buttons'>\n                    <button type='button'\n                        className='btn btn-outline-primary btn-sm'\n                        onClick={this.handleClick}>\n                        <i className='fa fa-pencil' />\n                    </button>\n                    <button type='button'\n                        className='btn btn-outline-danger btn-sm'\n                        onClick={onDeleted}>\n                        <i className='fa fa-trash-o' />\n                    </button>\n                    <button type='button'\n                        className='btn btn-outline-success btn-sm'\n                        onClick={onToggleImportant}>\n                        <i className='fa fa-exclamation' />\n                    </button>\n                </div>\n            </span>\n        );\n    }\n\n    render() {\n        return this.state.editing ? this.renderForm() : this.renderDisplay();\n    }\n}\n\nexport default TodoListItem;","import TodoList from './todo-list';\n\nexport default TodoList;","import React from 'react';\n\nimport TodoListItem from '../todo-list-item';\n\nimport './todo-list.css';\n\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone, onEdit }) => {\n    return (\n        <ul className='list-group todo-list'>\n            {todos.map((todo) => (\n                <li className='list-group-item' key={todo.id}>\n                    <TodoListItem\n                        label={todo.label}\n                        important={todo.important}\n                        done={todo.done}\n                        onDeleted={() => onDeleted(todo.id)}\n                        id={todo.id}\n                        onEdit={onEdit}\n                        onToggleImportant={() => onToggleImportant(todo.id)}\n                        onToggleDone={() => onToggleDone(todo.id)} />\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nexport default TodoList;","let todoData = [\n    {\n        id: 1,\n        label: 'Drink Coffee',\n        done: false,\n        important: false\n    },\n    {\n        id: 2,\n        label: 'Make Awesome App',\n        done: false,\n        important: true\n    },\n    {\n        id: 3,\n        label: 'Have a lunch',\n        done: false,\n        important: false\n    },\n];\n\nexport default todoData;","import AppHeader from './app-header';\n\nexport default AppHeader;","import React from 'react';\n\nimport './app-header.css';\n\nconst AppHeader = ({ todo, done }) => {\n    return (\n        <div className='app-header d-flex'>\n            <h1>Todo List</h1>\n            <h2>{todo}, more to do, {done}, done</h2>\n        </div>\n    );\n}\n\nexport default AppHeader;","import SearchPanel from './search-panel';\n\nexport default SearchPanel;","import React from 'react';\n\nimport './search-panel.css';\n\nclass SearchPanel extends React.Component {\n\n    state = {\n        term: ''\n    };\n\n    handleChange = (evt) => {\n        const term = evt.target.value;\n        this.setState({\n            term: term\n        });\n        this.props.onSearchChange(term);\n    }\n\n    render() {\n        return (\n            <input\n                type='text'\n                className='form-control search-input'\n                placeholder='search'\n                value={this.state.term}\n                onChange={this.handleChange} />\n        );\n    }\n}\n\nexport default SearchPanel;","import ItemAddForm from './item-add-form';\n\nexport default ItemAddForm;","import React from 'react';\n\nimport './item-add-form.css';\n\nclass ItemAddForm extends React.Component {\n\n\tstate = {\n\t\ttext: '',\n\t\tisInvalid: false\n\t};\n\n\thandleChange = (evt) => {\n\t\tthis.setState({ text: evt.target.value });\n\t}\n\n\thandleSubmit = (evt) => {\n\t\tevt.preventDefault();\n\t\tconst text = this.state.text.trim();\n\t\tif (text.length > 0) {\n\t\t\tthis.props.onAdd(text);\n\t\t\tthis.setState({\n\t\t\t\ttext: '',\n\t\t\t\tisInvalid: false\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({ isInvalid: true });\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit} className='item-add-form d-flex'>\n\t\t\t\t<input type='text'\n\t\t\t\t\tclassName={`form-control ${this.state.isInvalid ? 'is-invalid' : ''}`}\n\t\t\t\t\tplaceholder='What needs to be done'\n\t\t\t\t\tvalue={this.state.text}\n\t\t\t\t\tonChange={this.handleChange} />\n\t\t\t\t<button type='submit' className='btn btn-outline-secondary'>\n\t\t\t\t\tAdd Item\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default ItemAddForm;","import ItemStatusFilter from './item-status-filter';\n\nexport default ItemStatusFilter;","import React from 'react';\n\nconst ItemStatusFilter = ({ filter, onFilterChange }) => {\n    const buttons = [\n        { name: 'all', label: 'All' },\n        { name: 'active', label: 'Active' },\n        { name: 'done', label: 'Done' }\n    ];\n    return (\n        <div className='btn-group'>\n            {buttons.map(({ name, label }) => {\n                const isActive = filter === name;\n                const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\n\n                return (\n                    <button type='button'\n                        key={name}\n                        className={`btn ${clazz}`}\n                        onClick={() => onFilterChange(name)}>{label}</button>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default ItemStatusFilter;","import App from './app';\n\nexport default App;","import React from 'react';\n\nimport TodoList from '../todo-list';\nimport todoData from '../todo-data';\nimport AppHeader from '../app-header';\nimport SearchPanel from '../search-panel';\nimport ItemAddForm from '../item-add-form';\nimport ItemStatusFilter from '../item-status-filter';\n\nimport './app.css';\n\nclass App extends React.Component {\n\n    state = {\n        term: '',\n        filter: 'all',\n        todos: todoData\n    };\n\n    createTodoItem(label) {\n        return {\n            label: label,\n            important: false,\n            done: false,\n            id: this.nextId()\n        }\n    }\n\n    handleDelete = (id) => {\n        const todos = this.state.todos.filter(todo => todo.id !== id)\n        this.setState({ todos: todos });\n    }\n\n    handleEdit = (id, text) => {\n        const todos = this.state.todos.map((todo) => {\n            if (todo.id === id) {\n                todo.label = text;\n            }\n            return todo;\n        });\n        this.setState({ todos: todos });\n    }\n\n    nextId() {\n        this._nextId = this._nextId || this.state.todos.length + 1;\n        return this._nextId++;\n    }\n\n    handleAdd = (text) => {\n        const todo = this.createTodoItem(text);\n        const todos = [...this.state.todos, todo];\n        this.setState({ todos: todos });\n    }\n\n    onToggleImportant = (id) => {\n        const todos = this.toggleProperty(this.state.todos, id, 'important')\n        this.setState({ todos: todos });\n    }\n\n    onToggleDone = (id) => {\n        const todos = this.toggleProperty(this.state.todos, id, 'done');\n        this.setState({ todos: todos });\n    }\n\n    toggleProperty(array, id, propName) {\n        const idx = array.findIndex(todo => todo.id === id);\n        const oldItem = array[idx];\n        const newItem = { ...oldItem, [propName]: !oldItem[propName] };\n        return [...array.slice(0, idx), newItem, ...array.slice(idx + 1)];\n    }\n\n    onSearchChange = (term) => {\n        this.setState({ term: term });\n    }\n\n    search(items, term) {\n        if (term.length === 0) {\n            return items;\n        } else {\n            return items.filter(item => item.label.toLowerCase().indexOf(term.toLowerCase()) > -1);\n        }\n    }\n\n    filter(items, filter) {\n        switch (filter) {\n            case 'all':\n                return items\n            case 'done':\n                return items.filter((item) => item.done);\n            case 'active':\n                return items.filter((item) => !item.done);\n            default:\n                return items\n        }\n    }\n\n    onFilterChange = (filter) => {\n        this.setState({ filter: filter });\n    }\n\n    render() {\n        const { todos, term, filter } = this.state;\n        const doneCount = todos.filter((todo) => todo.done === true).length;\n        const todoCount = todos.length - doneCount;\n        const visibleItems = this.filter(this.search(todos, term), filter);\n        return (\n            <div className='todo-app'>\n                <AppHeader todo={todoCount} done={doneCount} />\n                <div className='top-panel d-flex'>\n                    <SearchPanel onSearchChange={this.onSearchChange} />\n                    <ItemStatusFilter\n                        filter={filter}\n                        onFilterChange={this.onFilterChange} />\n                </div>\n                <TodoList\n                    onDeleted={this.handleDelete}\n                    onEdit={this.handleEdit}\n                    todos={visibleItems}\n                    onToggleImportant={this.onToggleImportant}\n                    onToggleDone={this.onToggleDone} />\n                <ItemAddForm onAdd={this.handleAdd} />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}